diff --git a/node_modules/vite/dist/node/chunks/dep-cb562f8f.js b/node_modules/vite/dist/node/chunks/dep-cb562f8f.js
index 877f037..3c543cd 100644
--- a/node_modules/vite/dist/node/chunks/dep-cb562f8f.js
+++ b/node_modules/vite/dist/node/chunks/dep-cb562f8f.js
@@ -5864,8 +5864,8 @@ function assetPlugin(config) {
     return {
         name: 'vite:asset',
         buildStart() {
-            assetCache.set(config, new Map());
-            assetHashToFilenameMap.set(config, new Map());
+            if (!assetCache.has(config)) assetCache.set(config, new Map());
+            if (!assetHashToFilenameMap.has(config)) assetHashToFilenameMap.set(config, new Map());
         },
         resolveId(id) {
             if (!config.assetsInclude(cleanUrl(id))) {
@@ -70019,20 +70019,27 @@ function webWorkerPlugin(config) {
             }
             let url;
             if (isBuild) {
-                if (query.inline != null) {
-                    // bundle the file as entry to support imports and inline as blob
-                    // data url
-                    const rollup = require('rollup');
-                    const bundle = await rollup.rollup({
-                        input: cleanUrl(id),
-                        plugins: config.plugins
+                // bundle the file as entry to support imports
+                const rollup = require('rollup');
+                const bundle = await rollup.rollup({
+                    input: cleanUrl(id),
+                    plugins: config.plugins
+                });
+                let code;
+                try {
+                    const { output } = await bundle.generate({
+                        format: 'iife',
+                        sourcemap: config.build.sourcemap
                     });
-                    try {
-                        const { output } = await bundle.generate({
-                            format: 'es',
-                            sourcemap: config.build.sourcemap
-                        });
-                        return `const blob = new Blob([atob(\"${Buffer.from(output[0].code).toString('base64')}\")], { type: 'text/javascript;charset=utf-8' });
+                    code = output[0].code;
+                }
+                finally {
+                    await bundle.close();
+                }
+                const content = Buffer.from(code);
+                if (query.inline != null) {
+                    // inline as blob data url
+                    return `const blob = new Blob([atob("${content.toString('base64')}")], { type: 'text/javascript;charset=utf-8' });
             export default function WorkerWrapper() {
               const objURL = (window.URL || window.webkitURL).createObjectURL(blob);
               try {
@@ -70041,16 +70048,14 @@ function webWorkerPlugin(config) {
                 (window.URL || window.webkitURL).revokeObjectURL(objURL);
               }
             }`;
-                    }
-                    finally {
-                        await bundle.close();
-                    }
                 }
                 else {
-                    // emit as separate chunk
+                    const basename = path__default.parse(cleanUrl(id)).name;
+                    const contentHash = getAssetHash(content);
                     url = `__VITE_ASSET__${this.emitFile({
-                        type: 'chunk',
-                        id: cleanUrl(id)
+                        name: `${basename}.${contentHash}.js`,
+                        type: 'asset',
+                        source: code
                     })}__`;
                 }
             }
