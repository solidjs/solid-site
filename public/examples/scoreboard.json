{
  "name": "Scoreboard",
  "description": "A simple standard counter example",
  "files": [
    {
      "name": "main",
      "content": [
        "import {",
        "\tcreateMemo,",
        "\tcreateSignal,",
        "\tcreateComputed,",
        "\tonCleanup,",
        "\tFor",
        "} from \"solid-js\";",
        "import { createStore } from \"solid-js/store\";",
        "import { render } from \"solid-js/web\";",
        "",
        "const App = () => {",
        "\tlet newName, newScore;",
        "\tconst [state, setState] = createStore({",
        "\t\t\tplayers: [",
        "\t\t\t\t{ name: \"Mark\", score: 3 },",
        "\t\t\t\t{ name: \"Troy\", score: 2 },",
        "\t\t\t\t{ name: \"Jenny\", score: 1 },",
        "\t\t\t\t{ name: \"David\", score: 8 }",
        "\t\t\t]",
        "\t\t}),",
        "\t\tlastPos = new WeakMap(),",
        "\t\tcurPos = new WeakMap(),",
        "\t\tgetSorted = createMemo((list = []) => {",
        "\t\t\tlist.forEach((p, i) => lastPos.set(p, i));",
        "\t\t\tconst newList = state.players.slice().sort((a, b) => {",
        "\t\t\t\tif (b.score === a.score) return a.name.localeCompare(b.name); // stabilize the sort",
        "\t\t\t\treturn b.score - a.score;",
        "\t\t\t});",
        "\t\t\tlet updated = newList.length !== list.length;",
        "\t\t\tnewList.forEach(",
        "\t\t\t\t(p, i) => lastPos.get(p) !== i && (updated = true) && curPos.set(p, i)",
        "\t\t\t);",
        "\t\t\treturn updated ? newList : list;",
        "\t\t}),",
        "\t\thandleAddClick = () => {",
        "\t\t\tconst name = newName.value,",
        "\t\t\t\tscore = +newScore.value;",
        "\t\t\tif (!name.length || isNaN(score)) return;",
        "\t\t\tsetState(\"players\", (p) => [...p, { name: name, score: score }]);",
        "\t\t\tnewName.value = newScore.value = \"\";",
        "\t\t},",
        "\t\thandleDeleteClick = (player) => {",
        "\t\t\tconst idx = state.players.indexOf(player);",
        "\t\t\tsetState(\"players\", (p) => [...p.slice(0, idx), ...p.slice(idx + 1)]);",
        "\t\t},",
        "\t\thandleScoreChange = (player, { target }) => {",
        "\t\t\tconst score = +target.value;",
        "\t\t\tconst idx = state.players.indexOf(player);",
        "\t\t\tif (isNaN(+score) || idx < 0) return;",
        "\t\t\tsetState(\"players\", idx, \"score\", score);",
        "\t\t},",
        "\t\tcreateStyles = (player) => {",
        "\t\t\tconst [style, setStyle] = createSignal();",
        "\t\t\tcreateComputed(() => {",
        "\t\t\t\tgetSorted();",
        "\t\t\t\tconst offset = lastPos.get(player) * 18 - curPos.get(player) * 18,",
        "\t\t\t\t\tt = setTimeout(() =>",
        "\t\t\t\t\t\tsetStyle({ transition: \"250ms\", transform: null })",
        "\t\t\t\t\t);",
        "\t\t\t\tsetStyle({",
        "\t\t\t\t\ttransform: `translateY(${offset}px)`,",
        "\t\t\t\t\ttransition: null",
        "\t\t\t\t});",
        "\t\t\t\tonCleanup(() => clearTimeout(t));",
        "\t\t\t});",
        "\t\t\treturn style;",
        "\t\t};",
        "",
        "\treturn (",
        "\t\t<div id=\"scoreboard\">",
        "\t\t\t<div class=\"board\">",
        "\t\t\t\t<For each={getSorted()}>",
        "\t\t\t\t\t{(player) => {",
        "\t\t\t\t\t\tconst getStyles = createStyles(player),",
        "\t\t\t\t\t\t\t{ name } = player;",
        "\t\t\t\t\t\treturn (",
        "\t\t\t\t\t\t\t<div class=\"player\" style={getStyles()}>",
        "\t\t\t\t\t\t\t\t<div class=\"name\">{name}</div>",
        "\t\t\t\t\t\t\t\t<div class=\"score\">{player.score}</div>",
        "\t\t\t\t\t\t\t</div>",
        "\t\t\t\t\t\t);",
        "\t\t\t\t\t}}",
        "\t\t\t\t</For>",
        "\t\t\t</div>",
        "\t\t\t<form class=\"admin\">",
        "\t\t\t\t<For each={state.players}>",
        "\t\t\t\t\t{(player) => {",
        "\t\t\t\t\t\tconst { name, score } = player;",
        "\t\t\t\t\t\treturn (",
        "\t\t\t\t\t\t\t<div class=\"player\">",
        "\t\t\t\t\t\t\t\t{name}",
        "\t\t\t\t\t\t\t\t<input",
        "\t\t\t\t\t\t\t\t\tclass=\"score\"",
        "\t\t\t\t\t\t\t\t\ttype=\"number\"",
        "\t\t\t\t\t\t\t\t\tvalue={score}",
        "\t\t\t\t\t\t\t\t\tonInput={[handleScoreChange, player]}",
        "\t\t\t\t\t\t\t\t/>",
        "\t\t\t\t\t\t\t\t<button type=\"button\" onClick={[handleDeleteClick, player]}>",
        "\t\t\t\t\t\t\t\t\tx",
        "\t\t\t\t\t\t\t\t</button>",
        "\t\t\t\t\t\t\t</div>",
        "\t\t\t\t\t\t);",
        "\t\t\t\t\t}}",
        "\t\t\t\t</For>",
        "\t\t\t\t<div class=\"player\">",
        "\t\t\t\t\t<input",
        "\t\t\t\t\t\ttype=\"text\"",
        "\t\t\t\t\t\tname=\"name\"",
        "\t\t\t\t\t\tplaceholder=\"New player...\"",
        "\t\t\t\t\t\tref={newName}",
        "\t\t\t\t\t/>",
        "\t\t\t\t\t<input class=\"score\" type=\"number\" name=\"score\" ref={newScore} />",
        "\t\t\t\t\t<button type=\"button\" onClick={handleAddClick}>",
        "\t\t\t\t\t\tAdd",
        "\t\t\t\t\t</button>",
        "\t\t\t\t</div>",
        "\t\t\t</form>",
        "\t\t</div>",
        "\t);",
        "};",
        "",
        "render(App, document.getElementById(\"app\"));"
      ]
    }
  ]
}
